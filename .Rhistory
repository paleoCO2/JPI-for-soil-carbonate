ggplot(data, aes(x = dD, y = depth)) +
geom_path() +
theme_bw() + theme(panel.grid.minor = element_blank(),panel.grid.major = element_blank()) +
scale_y_reverse()
# inputs
d18O_w <- -5
dD_w <- d18O_w * 8 + 10
Dp17O_w <- 0
d18O_v <- -14
dD_v <- d18O_v * 8 + 10
Dp17O_v <- 0
total_porosity <- 0.4 # sandy loam
tortuosity <- 0.6 # sandy loam
water_content <- 0.07 # cm3 water/cm3 soil
water_content_0 <- 0.05 # disconnected water content
Tair <- 20
Tsoil <- 20
#evap <- 1.1/(365*24*60*60) # evaporation rate of water (cm/s): 1.1 cm/yr
evap <- 0.1/(24*60*60) # cm/s
ha <- 0.3 # the relative humidity of the free atmosphere
#constants
theta_eq <- 0.529
theta_diff <- 0.5185
R18_SMOW <- 0.0020052 # standard samples
R17_SMOW <- 0.0003799
R2_SMOW <- 0.00015576
#equilibrium fractionation factor between water vapor and liquid
alpha18_eq <- exp((-2.0667*10^-3)-(0.4156/(Tsoil+273.15))+(1.137*10^3/((Tsoil+273.15)^2)))
alpha17_eq <- alpha18_eq^theta_eq
alpha2_eq <- exp((52.612*10^-3)-(76.248/(Tsoil+273.15))+(24.844*10^3/((Tsoil+273.15)^2)))
#diffusion fractionation factor between water vapor and liquid
alpha18_diff <- 1.028489
alpha17_diff <- 1.014672
alpha2_diff <- 1.025115
# converting delta notation to R ratio
# d18O_v <- -10 # isotopic values of atmospheric water vapor in permil
# Dp17O_v <- 10 # per meg
# R18O_v <- ((d18O_v/1000)+1)*R18_SMOW
# R17O_v <- exp((Dp17O_v/1000) + 0.528*log(R18O_v/R18_SMOW)) * R17_SMOW
R18O_w <- ((d18O_w/1000)+1)*R18_SMOW
R17O_w <- exp((Dp17O_w/1000) + 0.528*log(R18O_w/R18_SMOW)) * R17_SMOW
RD_w <- (dD_w/1000+1)*R2_SMOW
# assuming atmospheric water vapor in isotope equilibrium with the water input
#R18O_v <- R18O_w/alpha18_eq
#R17O_v <- R17O_w/alpha17_eq
#RD_v <- RD_w/alpha2_eq
R18O_v <- ((d18O_v/1000)+1)*R18_SMOW
R17O_v <- exp((Dp17O_v/1000) + 0.528*log(R18O_v/R18_SMOW)) * R17_SMOW
RD_v <- (dD_v/1000+1)*R2_SMOW
density_water <- 1 # g/cm3
water_content_0 <- 0.05 # disconnected water content
#E <- 1.1/(365*24*60*60) # evaporation rate of water (cm/s): 1.1 cm/yr
# diffusion coefficient
D_H2O_liquid <- 2.3*10^-5 # diffusion coefficient in liquid water at 25°C (cm2/s) (Harris and Wolf, 1980)
D_H2O_v <- 0.242 # diffusion coefficient in air at 20°C (cm2/s)
# molar mass: g/mol
molarmass16O <- 15.99491;
molarmassO <- 15.9994;
molarmassH <- 1.00784;
molarmassD <- 2.0141
molarmass18O <- 17.99916;
molarmassH2O <- molarmassH*2 + molarmassO
molarmassH216O <- molarmassH*2 + molarmass16O
molarmassH218O <- molarmassH*2 + molarmass18O
molarmassHDO <- molarmassD + molarmassH + molarmassO
molarmassair <- 28.97
# diffusion coefficient of different species in vapor and liquid phases (cm2/s)
D_H2OoverD_H218O_liquid <- ((molarmassH218O)/(molarmassH2O))^0.5
D_H216OoverD_H218O_liquid <- ((molarmassH218O)/(molarmassH216O))^0.5
D_HDOoverD_H2O_liquid <- ((molarmassH2O)/(molarmassHDO))^0.5
D_H2OoverD_H218O_v <- (((molarmassair + molarmassH2O)*(molarmassair * molarmassH218O)) / ((molarmassair + molarmassH218O)*(molarmassair * molarmassH2O)))^0.5
D_H216OoverD_H218O_v <- 1.028 # Merlivat 1978- this differs from theoretical value of 1.032. Should incorporate the empirical value. See Barkan and Luz 2007 and Horita 2008 for dicussion of reasons for differences between empirical and theoretical values
D_HDOoverD_H2O_v <- (((molarmassair + molarmassH2O)*(molarmassair * molarmassHDO)) / ((molarmassair + molarmassHDO)*(molarmassair * molarmassH2O)))^0.5
D_H218O_liquid <- D_H2O_liquid / D_H2OoverD_H218O_liquid
D_H216O_liquid <- D_H218O_liquid * D_H216OoverD_H218O_liquid
D_H216OoverD_H217O_liquid <- (D_H216OoverD_H218O_liquid)^theta_diff
D_H217O_liquid <- D_H216O_liquid / D_H216OoverD_H217O_liquid
D_HDO_liquid <- D_H2O_liquid * D_HDOoverD_H2O_liquid
D_H218O_v <- D_H2O_v / D_H2OoverD_H218O_v
D_H216O_v <- D_H218O_v * D_H216OoverD_H218O_v
D_H216OoverD_H217O_v <- (D_H216OoverD_H218O_v)^theta_diff
D_H217O_v <- D_H216O_v / D_H216OoverD_H217O_v
D_HDO_v <- D_H2O_v * D_HDOoverD_H2O_v
# effective diffusivity in soil water
eff_D_H217O_liquid <- total_porosity * tortuosity * D_H217O_liquid
eff_D_H218O_liquid <- total_porosity * tortuosity * D_H218O_liquid
eff_D_HDO_liquid <- total_porosity * tortuosity * D_HDO_liquid
# mean penetration depth : cm
z_mean_17O <- eff_D_H217O_liquid / evap
z_mean_18O <- eff_D_H218O_liquid / evap
z_mean_D <- eff_D_HDO_liquid /evap
# soil column - 1m
#isotopic compositions of surface water
# R18O_s <- ((1-ha)*alpha18_diff*R18O_w + ha*R18O_v)/alpha18_eq
# R17O_s <- ((1-ha)*alpha17_diff*R17O_w + ha*R17O_v)/alpha17_eq
R18O_s <- ((1-ha)*R18O_w/alpha18_diff + ha*R18O_v)*alpha18_eq
R17O_s <- ((1-ha)*R17O_w/alpha17_diff + ha*R17O_v)*alpha17_eq
RD_s <- ((1-ha)*RD_w/alpha2_diff + ha*RD_v)*alpha2_eq
number <- 1000
data <- as.data.frame(matrix(nrow = number, ncol = 5))
names(data) <- c("depth", "d18O", "dD", "d_excess", "Dp17O")
for (i in 1:number) {
data$depth[i] <- i*100/number # cm
R18O <- (R18O_s - R18O_w)*exp(-i/z_mean_18O) + R18O_w
R17O <- (R17O_s - R17O_w)*exp(-i/z_mean_17O) + R17O_w
RD <- (RD_s - RD_w)*exp(-i/z_mean_D) + RD_w
data$d18O[i] <- (R18O/R18_SMOW-1)*1000
data$dD[i] <- (RD/R2_SMOW-1)*1000
data$Dp17O[i] <- (log(R17O/R17_SMOW) - 0.528*log(R18O/R18_SMOW))*10^6
data$d_excess[i] <- (RD/R2_SMOW-1)*1000-8*data$d18O[i]
}
ggplot(data, aes(x = d18O, y = depth)) +
geom_path() +
theme_bw() + theme(panel.grid.minor = element_blank(),panel.grid.major = element_blank()) +
scale_y_reverse()
# inputs
d18O_w <- -5
dD_w <- d18O_w * 8 + 10
Dp17O_w <- 0
d18O_v <- -14
dD_v <- d18O_v * 8 + 10
Dp17O_v <- 0
total_porosity <- 0.4 # sandy loam
tortuosity <- 0.6 # sandy loam
water_content <- 0.07 # cm3 water/cm3 soil
water_content_0 <- 0.05 # disconnected water content
Tair <- 20
Tsoil <- 20
#evap <- 1.1/(365*24*60*60) # evaporation rate of water (cm/s): 1.1 cm/yr
evap <- 0.01/(24*60*60) # cm/s
ha <- 0.3 # the relative humidity of the free atmosphere
#constants
theta_eq <- 0.529
theta_diff <- 0.5185
R18_SMOW <- 0.0020052 # standard samples
R17_SMOW <- 0.0003799
R2_SMOW <- 0.00015576
#equilibrium fractionation factor between water vapor and liquid
alpha18_eq <- exp((-2.0667*10^-3)-(0.4156/(Tsoil+273.15))+(1.137*10^3/((Tsoil+273.15)^2)))
alpha17_eq <- alpha18_eq^theta_eq
alpha2_eq <- exp((52.612*10^-3)-(76.248/(Tsoil+273.15))+(24.844*10^3/((Tsoil+273.15)^2)))
#diffusion fractionation factor between water vapor and liquid
alpha18_diff <- 1.028489
alpha17_diff <- 1.014672
alpha2_diff <- 1.025115
# converting delta notation to R ratio
# d18O_v <- -10 # isotopic values of atmospheric water vapor in permil
# Dp17O_v <- 10 # per meg
# R18O_v <- ((d18O_v/1000)+1)*R18_SMOW
# R17O_v <- exp((Dp17O_v/1000) + 0.528*log(R18O_v/R18_SMOW)) * R17_SMOW
R18O_w <- ((d18O_w/1000)+1)*R18_SMOW
R17O_w <- exp((Dp17O_w/1000) + 0.528*log(R18O_w/R18_SMOW)) * R17_SMOW
RD_w <- (dD_w/1000+1)*R2_SMOW
# assuming atmospheric water vapor in isotope equilibrium with the water input
#R18O_v <- R18O_w/alpha18_eq
#R17O_v <- R17O_w/alpha17_eq
#RD_v <- RD_w/alpha2_eq
R18O_v <- ((d18O_v/1000)+1)*R18_SMOW
R17O_v <- exp((Dp17O_v/1000) + 0.528*log(R18O_v/R18_SMOW)) * R17_SMOW
RD_v <- (dD_v/1000+1)*R2_SMOW
density_water <- 1 # g/cm3
water_content_0 <- 0.05 # disconnected water content
#E <- 1.1/(365*24*60*60) # evaporation rate of water (cm/s): 1.1 cm/yr
# diffusion coefficient
D_H2O_liquid <- 2.3*10^-5 # diffusion coefficient in liquid water at 25°C (cm2/s) (Harris and Wolf, 1980)
D_H2O_v <- 0.242 # diffusion coefficient in air at 20°C (cm2/s)
# molar mass: g/mol
molarmass16O <- 15.99491;
molarmassO <- 15.9994;
molarmassH <- 1.00784;
molarmassD <- 2.0141
molarmass18O <- 17.99916;
molarmassH2O <- molarmassH*2 + molarmassO
molarmassH216O <- molarmassH*2 + molarmass16O
molarmassH218O <- molarmassH*2 + molarmass18O
molarmassHDO <- molarmassD + molarmassH + molarmassO
molarmassair <- 28.97
# diffusion coefficient of different species in vapor and liquid phases (cm2/s)
D_H2OoverD_H218O_liquid <- ((molarmassH218O)/(molarmassH2O))^0.5
D_H216OoverD_H218O_liquid <- ((molarmassH218O)/(molarmassH216O))^0.5
D_HDOoverD_H2O_liquid <- ((molarmassH2O)/(molarmassHDO))^0.5
D_H2OoverD_H218O_v <- (((molarmassair + molarmassH2O)*(molarmassair * molarmassH218O)) / ((molarmassair + molarmassH218O)*(molarmassair * molarmassH2O)))^0.5
D_H216OoverD_H218O_v <- 1.028 # Merlivat 1978- this differs from theoretical value of 1.032. Should incorporate the empirical value. See Barkan and Luz 2007 and Horita 2008 for dicussion of reasons for differences between empirical and theoretical values
D_HDOoverD_H2O_v <- (((molarmassair + molarmassH2O)*(molarmassair * molarmassHDO)) / ((molarmassair + molarmassHDO)*(molarmassair * molarmassH2O)))^0.5
D_H218O_liquid <- D_H2O_liquid / D_H2OoverD_H218O_liquid
D_H216O_liquid <- D_H218O_liquid * D_H216OoverD_H218O_liquid
D_H216OoverD_H217O_liquid <- (D_H216OoverD_H218O_liquid)^theta_diff
D_H217O_liquid <- D_H216O_liquid / D_H216OoverD_H217O_liquid
D_HDO_liquid <- D_H2O_liquid * D_HDOoverD_H2O_liquid
D_H218O_v <- D_H2O_v / D_H2OoverD_H218O_v
D_H216O_v <- D_H218O_v * D_H216OoverD_H218O_v
D_H216OoverD_H217O_v <- (D_H216OoverD_H218O_v)^theta_diff
D_H217O_v <- D_H216O_v / D_H216OoverD_H217O_v
D_HDO_v <- D_H2O_v * D_HDOoverD_H2O_v
# effective diffusivity in soil water
eff_D_H217O_liquid <- total_porosity * tortuosity * D_H217O_liquid
eff_D_H218O_liquid <- total_porosity * tortuosity * D_H218O_liquid
eff_D_HDO_liquid <- total_porosity * tortuosity * D_HDO_liquid
# mean penetration depth : cm
z_mean_17O <- eff_D_H217O_liquid / evap
z_mean_18O <- eff_D_H218O_liquid / evap
z_mean_D <- eff_D_HDO_liquid /evap
# soil column - 1m
#isotopic compositions of surface water
# R18O_s <- ((1-ha)*alpha18_diff*R18O_w + ha*R18O_v)/alpha18_eq
# R17O_s <- ((1-ha)*alpha17_diff*R17O_w + ha*R17O_v)/alpha17_eq
R18O_s <- ((1-ha)*R18O_w/alpha18_diff + ha*R18O_v)*alpha18_eq
R17O_s <- ((1-ha)*R17O_w/alpha17_diff + ha*R17O_v)*alpha17_eq
RD_s <- ((1-ha)*RD_w/alpha2_diff + ha*RD_v)*alpha2_eq
number <- 1000
data <- as.data.frame(matrix(nrow = number, ncol = 5))
names(data) <- c("depth", "d18O", "dD", "d_excess", "Dp17O")
for (i in 1:number) {
data$depth[i] <- i*100/number # cm
R18O <- (R18O_s - R18O_w)*exp(-i/z_mean_18O) + R18O_w
R17O <- (R17O_s - R17O_w)*exp(-i/z_mean_17O) + R17O_w
RD <- (RD_s - RD_w)*exp(-i/z_mean_D) + RD_w
data$d18O[i] <- (R18O/R18_SMOW-1)*1000
data$dD[i] <- (RD/R2_SMOW-1)*1000
data$Dp17O[i] <- (log(R17O/R17_SMOW) - 0.528*log(R18O/R18_SMOW))*10^6
data$d_excess[i] <- (RD/R2_SMOW-1)*1000-8*data$d18O[i]
}
ggplot(data, aes(x = d18O, y = depth)) +
geom_path() +
theme_bw() + theme(panel.grid.minor = element_blank(),panel.grid.major = element_blank()) +
scale_y_reverse()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
omega <- 2*pi
setwd("/Users/jiawei/Documents/Dataset/R code for data analyses/climatic_parameters/")
omega <- 2*pi #radial frequency (2pi/year or 2pi/day)
# calculating the damping depth -d
kappa <- 0.0007 # thermal conductivity (cal/cm/s/C) typical of dry sandy soils
Cv <- 0.3 # volumetric heat capacity (cal/cm/C) typical of dry sandy soils
d <- ((2*kappa)/(Cv*omega))^0.5
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
setwd("/Users/jiawei/Documents/Work/2019- glacial CO2/R_code/dataset/")
theme <- theme(axis.text.x = element_text(margin = margin(t = 0.1, unit = "cm")),
axis.text.y = element_text(margin = margin(r = 0.1, unit = "cm")),
axis.ticks.length=unit(0.15, "cm"),
axis.ticks = element_line(colour = "black"),
text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.1, vjust = -10))
CO2 <- read.csv("dataset/CO2.csv")
getwd()
setwd("/Users/jiawei/Documents/Work/2019- glacial CO2/R_code/dataset/")
CO2 <- read.csv("dataset/CO2.csv")
getwd()
library(folio)
?intcal20
intcal20
library(rcarbon)
library(tidyverse)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
?calibrate
library(rcarbon)
??calibrate
install.packages("rcarbon")
library(rcarbon)
x <- calibrate(x = rdata$X14C, errors = rdata$error, calCurves = "intcal20")
View(x)
for (i in 1:nrow(rdata)) {
rdata$calibration[i] <- calibrate(x = rdata$X14C[i], errors = rdata$error[i], calCurves = "intcal20")
}
View(rdata)
View(rdata[[3]][[1]])
View(x)
x <- calibrate(x = rdata$X14C, errors = rdata$error, calCurves = "intcal20")
summary(x)
x$calibration
x$grids$`1`
x$X14C
summary(x)
y <- summary(x)
View(y)
rdata <- rdata %>%
mutate(MedianBP <- y$MedianBP,
1sigma <- y$OneSigma_BP_1)
library(folio)
library(rcarbon)
library(tidyverse)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
x <- calibrate(x = rdata$X14C, errors = rdata$error, calCurves = "intcal20")
y <- summary(x)
rdata <- rdata %>%
mutate(MedianBP <- y$MedianBP,
error <- y$OneSigma_BP_1)
View(rdata)
write.csv(rdata, "radiocarbon2.csv")
write.csv(rdata, "Documents/Dataset/R code for data analyses/radiocarbon2.csv")
y
View(y)
library(folio)
library(rcarbon)
library(tidyverse)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
x <- calibrate(x = rdata$X14C, errors = rdata$error, calCurves = "intcal20")
View(rdata)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
View(rdata)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
library(folio)
library(rcarbon)
library(tidyverse)
rdata <- read.csv("Documents/Dataset/R code for data analyses/radiocarbon.csv")
x <- calibrate(x = rdata$X14C, errors = rdata$error, calCurves = "intcal20")
y <- summary(x)
rdata <- rdata %>%
mutate(MedianBP <- y$MedianBP)
write.csv(rdata, "Documents/Dataset/R code for data analyses/radiocarbon2.csv")
View(rdata)
library(tidyverse)
read.csv("Documents/Work/2022- organic 14C work/R_code/XJ_data2.csv")
data <- read.csv("Documents/Work/2022- organic 14C work/R_code/XJ_data2.csv")
View(data)
m1 <- lm(data, d13C~lf)
?lm
m1 <- lm(d13C~lf, data)
summary(m1)
m1 <- lm(d13C_corr~lf, data)
summary(m1)
m1 <- lm(d13C~lf, data)
summary(m1)
300* 0.0925 + 13.4
install.packages("raster") # 用于处理栅格数据
install.packages("ggplot2") # 用于制作图表
library(raster)
library(ggplot2)
install.packages("ggplot2")
install.packages("raster") # 用于处理栅格数据
install.packages("ggplot2") # 用于制作图表
library(raster)
library(ggplot2)
library(tidyverse)
data <- read.csv("Desktop/800k.csv")
View(data)
FX <- data %>%
filter(site == "FX")
exponential_func <- function(params, x, y) {
a <- params[1]
b <- params[2]
y_pred <- a * exp(b * x)
sum((y_pred - y)^2)
}
initial_params <- c(25, -0.2)
fit <- nlm(exponential_func, p = initial_params, x = d18Oc, y = Sz)
fit <- nlm(data = FX, exponential_func, p = initial_params, x = d18Oc, y = Sz)
fit <- nlm(exponential_func, p = initial_params, x = FX$d18Oc, y = FX$Sz)
fit$estimate
fit <- nlmrt(exponential_func, p = initial_params, x = FX$d18Oc, y = FX$Sz)
cov_matrix <- vcov(fit)
library(nlmrt)
install.packages(nlmrt)
library(nlmrt)
fit <- nlmrt(exponential_func, p = initial_params, x = FX$d18Oc, y = FX$Sz)
library(nlmrt)
fit <- nlmrt(par = initial_params, fn = exponential_func, x = FX$d18Oc, y = FX$Sz)
library(nlmrt)
source("~/Desktop/R_code/PSM/PSM for soil carbonates/d13CcarbPSM_inv_17O.R")
## Inline R code
There were `r nrow(cars)` cars studied
setwd("/Users/jiawei/Documents/GitHub/JPI-for-soil-carbonate/")
library(tidyverse)
library(R2jags)
set.seed(42)
prox.in <- read.csv("data/Jiaxian.csv")
prox.in <- prox.in[, c(1:9)]
names(prox.in) <- c("age", "d13Cc", "d13Ccsd", "d18Oc", "d18Ocsd", "d13Co", "d13Cosd", "dp17Oc", "dp17Ocsd")
prox.in <- prox.in %>%
drop_na(age, d13Cc, d18Oc, d13Co)
prox.in$age <- prox.in$age / 1000 # ka to Ma
# read in the d13C of atmospheric CO2 from Tipple et al. (2010)
d13Ca <- read.csv("data/tipple_et_al_2010.csv") # age in Ma
d13Ca_interp <- approx(d13Ca$age, d13Ca$d13Ca, xout = prox.in$age, method = "linear")
prox.in$d13Ca <- d13Ca_interp$y
params <- c("pCO2", "h", "MAP", "S_z", "PfPCQ", "MAT", "f_soil", "z", "L", "f_R", "R_PCQ_D", "PET_A_A")
# Data inputs to jags
data <- list("d13Cc.data" = prox.in$d13Cc,
"d13Ccsd.data" = prox.in$d13Ccsd,
"d18Oc.data" = prox.in$d18Oc,
"d18Ocsd.data" = prox.in$d18Ocsd,
"d13Co.data" = prox.in$d13Co,
"d13Cosd.data" = prox.in$d13Cosd,
"d13Ca" = prox.in$d13Ca,
)
# Data inputs to jags
data <- list("d13Cc.data" = prox.in$d13Cc,
"d13Ccsd.data" = prox.in$d13Ccsd,
"d18Oc.data" = prox.in$d18Oc,
"d18Ocsd.data" = prox.in$d18Ocsd,
"d13Co.data" = prox.in$d13Co,
"d13Cosd.data" = prox.in$d13Cosd,
"d13Ca" = prox.in$d13Ca
)
# Run the inversion
jout <- jags(model.file = "carbPSM_inv.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 3, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
# Run the inversion
jout <- jags(model.file = "carbPSM_inv.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 3, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
# Run the inversion
jout <- jags(model.file = "carbPSM_inv.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 3, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
# Run the inversion
jout <- jags(model.file = "carbPSM_inv.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 3, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
jout$BUGSoutput$summary
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout[[1]], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$BUGSoutput[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$model[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$parameters.to.save[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout[[1]], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$BUGSoutput$sims.list[[1]], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$BUGSoutput$sims.list[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$BUGSoutput$sims.list, col = c("blue", "red", "green"))
summary(jout)
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$model[1], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$model[[1]], col = c("blue", "red", "green"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout$model, col = c("blue", "red", "green"))
# Look at the summary stats for the posterior
# looking here at the Rhat and sample size, which we'd like to be
# < about 1.03 and > several hundred, ideally. Suggests we should
# run more iterations before publishing!
View(jout[[1]]$BUGSoutput$summary)
# Look at the summary stats for the posterior
# looking here at the Rhat and sample size, which we'd like to be
# < about 1.03 and > several hundred, ideally. Suggests we should
# run more iterations before publishing!
View(jout$BUGSoutput$summary)
# setwd("/Users/jiawei/Desktop/R_code/PSM/PSM for soil carbonates/")
library(tidyverse)
library(R2jags)
set.seed(42)
#  These are the observed data
#data <- list("d13Cc.data" = d13Cc)
# These are the parameters you want recorded in the output
params <- c("pCO2", "S_z", "MAP", "f_soil", "h")
# run the inversion
# Run the inversion
data <- list("d13Cc.data" = -1.91, "d18Oc.data" = -9.12, "d13Co.data" = -22.3, "Dp17c.data" = -102)
jout <- jags(model.file = "d13CcarbPSM_inv_17O.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 4, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
library(tidyverse)
setwd("/Users/jiawei/Desktop/R_code/PSM/PSM for soil carbonates/")
jout1 <- jags(model.file = "d13CcarbPSM_inv_17O.R", parameters.to.save = params,
data = data, inits = NULL, n.chains = 4, n.iter = 1e4,
n.burnin = 1e3, n.thin = 10)
traceplot(jout1, col = c("blue", "red", "green", "purple"))
traceplot(jout1[1], col = c("blue", "red", "green", "purple"))
traceplot(jout1$model, col = c("blue", "red", "green", "purple"))
traceplot(jout1, col = c("blue", "red", "green", "purple"))
# Look at the results, first check visually for burn-in effect and convergence
traceplot(jout, col = c("blue", "red", "green"))
?traceplot
# Look at the summary stats for the posterior
# looking here at the Rhat and sample size, which we'd like to be
# < about 1.03 and > several hundred, ideally. Suggests we should
# run more iterations before publishing!
View(jout$BUGSoutput$mean)
# Look at the summary stats for the posterior
# looking here at the Rhat and sample size, which we'd like to be
# < about 1.03 and > several hundred, ideally. Suggests we should
# run more iterations before publishing!
View(jout$BUGSoutput$mean$pCO2)
# Look at the summary stats for the posterior
# looking here at the Rhat and sample size, which we'd like to be
# < about 1.03 and > several hundred, ideally. Suggests we should
# run more iterations before publishing!
View(jout$BUGSoutput$mean$pCO2)
jout$BUGSoutput$sims.list$MAP[1]
MCMC_output <- data.frame(matrix(nrow = nrow(prox.in), ncol = 7))
jout$BUGSoutput$mean$pCO2
jout$BUGSoutput$mean
MCMC_output <- jout$BUGSoutput$mean
View(MCMC_output)
MCMC_output <- do.call(rbind, jout$BUGSoutput$mean)
View(MCMC_output)
MCMC_output <- do.call(cbind, jout$BUGSoutput$mean)
MCMC_sd <- do.call(cbind, jout$BUGSoutput$sd)
View(MCMC_sd)
setwd("/Users/jiawei/Documents/GitHub/JPI-for-soil-carbonate/")
write.csv(MCMC_mean, "data/MCMC_mean.csv")
MCMC_mean <- do.call(cbind, jout$BUGSoutput$mean)
MCMC_sd <- do.call(cbind, jout$BUGSoutput$sd)
write.csv(MCMC_mean, "data/MCMC_mean.csv")
write.csv(MCMC_sd, "data/MCMC_sd.csv")
